"""
Django settings for kurrasat project.

Generated by 'django-admin startproject' using Django 5.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""
import os
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-3j+-w-v^!*swjc=424z3(d)%(lhixmshd+0cg+4t6o7=4z7o9h'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ["*"]

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'storages',  # Add django-storages
    'channels',
    'django_celery_results',  # Add Celery results backend
    'accounts',
    'core',
    'generator'
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',  # Add this line after security middleware
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.locale.LocaleMiddleware',  # For internationalization
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]
CHANNEL_LAYERS = {
    'default': {
        'BACKEND': 'channels.layers.InMemoryChannelLayer',
    },
}
ROOT_URLCONF = 'kurrasat.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'django.template.context_processors.i18n',  # For internationalization
                'core.context_processors.language_context',  # Correct name to match your function
            ],
        },
    },
]

WSGI_APPLICATION = 'kurrasat.wsgi.application'
ASGI_APPLICATION = 'kurrasat.asgi.application'

# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}

# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/
# Internationalization
LANGUAGE_CODE = 'ar'  # Default language is Arabic

TIME_ZONE = 'Asia/Riyadh'  # Saudi Arabia timezone

USE_I18N = True

USE_TZ = True

# Available languages
from django.utils.translation import gettext_lazy as _
LANGUAGES = [
    ('ar', _('Arabic')),
    ('en', _('English')),
]

LOCALE_PATHS = [
    os.path.join(BASE_DIR, 'locale'),
]

# Define base media and temporary directories
# These are needed regardless of whether S3 is used
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
TEMP_DIR = os.path.join(MEDIA_ROOT, 'temp')

# Create temporary directories
os.makedirs(TEMP_DIR, exist_ok=True)

# Create temporary subdirectories for file processing
TEMP_RFP_DIR = os.path.join(TEMP_DIR, 'rfp_documents')
TEMP_IMPROVED_DIR = os.path.join(TEMP_DIR, 'improved_rfps')
TEMP_ORIGINAL_DIR = os.path.join(TEMP_DIR, 'original_rfps')
os.makedirs(TEMP_RFP_DIR, exist_ok=True)
os.makedirs(TEMP_IMPROVED_DIR, exist_ok=True)
os.makedirs(TEMP_ORIGINAL_DIR, exist_ok=True)

# Static files configuration (used by both S3 and local)
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
STATIC_URL = '/static/'
# STATICFILES_DIRS = [
#     os.path.join(BASE_DIR, 'static'),
# ]

# S3 Configuration
USE_S3 = True

if USE_S3:
    # AWS Settings
    AWS_ACCESS_KEY_ID = 'AKIAYQVSVJKR56ZHAP2I'
    AWS_SECRET_ACCESS_KEY = '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'
    AWS_STORAGE_BUCKET_NAME = 'kurrasat-storage'
    AWS_S3_REGION_NAME = 'eu-north-1'
    AWS_S3_SIGNATURE_VERSION = 's3v4'
    AWS_S3_FILE_OVERWRITE = False
    AWS_DEFAULT_ACL = None
    AWS_S3_VERIFY = True
    AWS_S3_OBJECT_PARAMETERS = {
        'CacheControl': 'max-age=86400',
    }
    AWS_QUERYSTRING_AUTH = False  # Don't add complex query parameters to URLs

    # S3 optimized read settings
    S3_OPTIMIZE_READ = True
    S3_READ_CHUNK_SIZE = 8192

    # S3 Storage classes
    DEFAULT_FILE_STORAGE = 'kurrasat.storage_backends.MediaStorage'

    # Specialized storage classes
    RFP_DOCUMENT_STORAGE = 'kurrasat.storage_backends.RfpDocumentStorage'
    IMPROVED_RFP_STORAGE = 'kurrasat.storage_backends.ImprovedRfpStorage'
    ORIGINAL_RFP_STORAGE = 'kurrasat.storage_backends.OriginalRfpStorage'
    CSV_FILE_STORAGE = 'kurrasat.storage_backends.CSVStorage'

    # URLs for media in S3
    MEDIA_URL = f'https://{AWS_STORAGE_BUCKET_NAME}.s3.amazonaws.com/media/'

    # Option to cleanup local files after S3 upload
    CLEANUP_LOCAL_FILES = True
else:
    # Use local storage settings
    MEDIA_URL = '/media/'

    # Create permanent directories for local storage
    RFP_DOCUMENTS_DIR = os.path.join(MEDIA_ROOT, 'rfp_documents')
    IMPROVED_RFPS_DIR = os.path.join(MEDIA_ROOT, 'improved_rfps')
    ORIGINAL_RFPS_DIR = os.path.join(MEDIA_ROOT, 'original_rfps')
    os.makedirs(RFP_DOCUMENTS_DIR, exist_ok=True)
    os.makedirs(IMPROVED_RFPS_DIR, exist_ok=True)
    os.makedirs(ORIGINAL_RFPS_DIR, exist_ok=True)

    # Don't cleanup local files when using local storage
    CLEANUP_LOCAL_FILES = False

    # Set storage classes to None when not using S3
    RFP_DOCUMENT_STORAGE = None
    IMPROVED_RFP_STORAGE = None
    ORIGINAL_RFP_STORAGE = None
    CSV_FILE_STORAGE = None

# Celery Configuration
CELERY_BROKER_URL = os.environ.get('REDIS_URL', 'redis://localhost:6379/0')
CELERY_RESULT_BACKEND = 'django-db'  # Store results in the Django database
CELERY_ACCEPT_CONTENT = ['application/json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
CELERY_TIMEZONE = TIME_ZONE

# Redis Configuration (used by Celery)
REDIS_HOST = os.environ.get('REDIS_HOST', 'localhost')
REDIS_PORT = os.environ.get('REDIS_PORT', '6379')
REDIS_DB = os.environ.get('REDIS_DB', '0')
REDIS_URL = f'redis://{REDIS_HOST}:{REDIS_PORT}/{REDIS_DB}'

# Celery task settings
CELERY_TASK_TRACK_STARTED = True  # Track when tasks are started
CELERY_TASK_TIME_LIMIT = 30 * 60  # 30 minutes time limit for tasks
CELERY_WORKER_CONCURRENCY = 4  # Number of worker processes

# Maximum Upload Size - 50MB
DATA_UPLOAD_MAX_MEMORY_SIZE = 52428800  # 50 MB
FILE_UPLOAD_MAX_MEMORY_SIZE = 52428800  # 50 MB

# Default primary key field type
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Login URLs
LOGIN_URL = 'accounts:login'
LOGIN_REDIRECT_URL = 'core:index'
LOGOUT_REDIRECT_URL = 'accounts:login'

# Create logs directory
LOGS_DIR = os.path.join(BASE_DIR, 'logs')
os.makedirs(LOGS_DIR, exist_ok=True)

# Logging Configuration
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'console': {
            'level': 'INFO',
            'class': 'logging.StreamHandler',
            'formatter': 'verbose',
        },
        'file': {
            'level': 'INFO',
            'class': 'logging.FileHandler',
            'filename': os.path.join(LOGS_DIR, 'django.log'),
            'formatter': 'verbose',
        },
        'celery_file': {
            'level': 'INFO',
            'class': 'logging.FileHandler',
            'filename': os.path.join(LOGS_DIR, 'celery.log'),
            'formatter': 'verbose',
        },
    },
    'loggers': {
        'django': {
            'handlers': ['console', 'file'],
            'level': 'INFO',
            'propagate': True,
        },
        'celery': {
            'handlers': ['console', 'celery_file'],
            'level': 'INFO',
            'propagate': True,
        },
        'generator': {
            'handlers': ['console', 'file'],
            'level': 'INFO',
            'propagate': True,
        },
    },
}

OPENAI_API_KEY = "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"